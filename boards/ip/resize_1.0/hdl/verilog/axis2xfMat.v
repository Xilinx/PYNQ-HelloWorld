// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module axis2xfMat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        p_src_data_V_din,
        p_src_data_V_full_n,
        p_src_data_V_write,
        src_rows,
        src_cols
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
output  [23:0] p_src_data_V_din;
input   p_src_data_V_full_n;
output   p_src_data_V_write;
input  [11:0] src_rows;
input  [11:0] src_cols;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_TREADY;
reg p_src_data_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln39_fu_110_p2;
reg    p_src_data_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln39_reg_140;
reg   [11:0] j_0_i_reg_88;
reg    ap_block_state1;
wire   [0:0] icmp_ln38_fu_99_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] i_fu_104_p2;
reg   [11:0] i_reg_135;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] j_fu_115_p2;
reg   [23:0] src_data_V_read_reg_149;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] i_0_i_reg_77;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_src_data_V_U_apdone_blk;
wire   [23:0] src_TDATA_int;
wire    src_TVALID_int;
reg    src_TREADY_int;
wire    regslice_both_src_data_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 24 ))
regslice_both_src_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_TDATA),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_data_V_U_ack_in),
    .data_out(src_TDATA_int),
    .vld_out(src_TVALID_int),
    .ack_out(src_TREADY_int),
    .apdone_blk(regslice_both_src_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln38_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln38_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln38_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i_reg_77 <= i_reg_135;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_77 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_reg_88 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_i_reg_88 <= j_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_135 <= i_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_140 <= icmp_ln39_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_V_read_reg_149 <= src_TDATA_int;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_110_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_140 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_V_blk_n = p_src_data_V_full_n;
    end else begin
        p_src_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_reg_140 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_V_write = 1'b1;
    end else begin
        p_src_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_110_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TDATA_blk_n = src_TVALID_int;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((src_TVALID == 1'b1) & (regslice_both_src_data_V_U_ack_in == 1'b1))) begin
        src_TREADY = 1'b1;
    end else begin
        src_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TREADY_int = 1'b1;
    end else begin
        src_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln39_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln39_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln39_reg_140 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln39_fu_110_p2 == 1'd0) & (src_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln39_reg_140 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln39_fu_110_p2 == 1'd0) & (src_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln39_reg_140 == 1'd0) & (p_src_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln39_fu_110_p2 == 1'd0) & (src_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln39_fu_110_p2 == 1'd0) & (src_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln39_reg_140 == 1'd0) & (p_src_data_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_104_p2 = (i_0_i_reg_77 + 12'd1);

assign icmp_ln38_fu_99_p2 = ((i_0_i_reg_77 == src_rows) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_110_p2 = ((j_0_i_reg_88 == src_cols) ? 1'b1 : 1'b0);

assign j_fu_115_p2 = (j_0_i_reg_88 + 12'd1);

assign p_src_data_V_din = src_data_V_read_reg_149;

endmodule //axis2xfMat
