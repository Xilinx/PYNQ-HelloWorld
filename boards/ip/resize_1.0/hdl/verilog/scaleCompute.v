// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaleCompute (
        ap_clk,
        ap_rst,
        currindex,
        inscale_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] currindex;
input  [47:0] inscale_V;
output  [41:0] ap_return;
input   ap_ce;

reg[41:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [73:0] grp_fu_60_p2;
reg   [73:0] mul_ln1193_reg_91;
wire    ap_block_pp0_stage0;
wire   [19:0] trunc_ln728_fu_34_p1;
wire   [41:0] p_Val2_s_fu_38_p3;
wire  signed [41:0] ret_V_fu_46_p2;
wire   [47:0] grp_fu_60_p1;
wire   [73:0] ret_V_2_fu_66_p2;
reg    grp_fu_60_ce;
reg    ap_ce_reg;
reg   [31:0] currindex_int_reg;
reg   [47:0] inscale_V_int_reg;
reg   [41:0] ap_return_int_reg;
wire   [73:0] grp_fu_60_p10;

resize_accel_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 74 ))
resize_accel_mul_cud_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_V_fu_46_p2),
    .din1(grp_fu_60_p1),
    .ce(grp_fu_60_ce),
    .dout(grp_fu_60_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= {{ret_V_2_fu_66_p2[73:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        currindex_int_reg <= currindex;
        inscale_V_int_reg <= inscale_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1193_reg_91 <= grp_fu_60_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = {{ret_V_2_fu_66_p2[73:32]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_60_ce = 1'b1;
    end else begin
        grp_fu_60_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign grp_fu_60_p1 = grp_fu_60_p10;

assign grp_fu_60_p10 = inscale_V_int_reg;

assign p_Val2_s_fu_38_p3 = {{trunc_ln728_fu_34_p1}, {22'd0}};

assign ret_V_2_fu_66_p2 = ($signed(74'd18889456924279326113792) + $signed(mul_ln1193_reg_91));

assign ret_V_fu_46_p2 = (p_Val2_s_fu_38_p3 | 42'd2097152);

assign trunc_ln728_fu_34_p1 = currindex_int_reg[19:0];

endmodule //scaleCompute
